#include <lpc17xx.h>
#include <stdint.h>
#include <string.h> // For strcmp

#define ROW_PINS (0x0F << 4)    // Rows connected to P2.4 to P2.7
#define COL_PINS (0x0F << 0)    // Columns connected to P2.0 to P2.3
#define LCD_DATA_PINS (0xFF << 15) // LCD Data pins connected to P0.15 to P0.22
#define LCD_RS_PIN(X) (1 << X)  // RS pin for LCD connected to P0.X
#define LCD_EN_PIN(X) (1 << X)  // Enable pin for LCD connected to P0.X

const char CORRECT_PASSWORD[] = "123"; // Define the correct password

void lcd_init(void);
void lcd_cmd_write(char cmd);
void lcd_data_write(char dat);
void lcd_str_write(char *str);
void delay(uint32_t ms);
void handle_key_action(char key);
void handle_audio_selection(void);

int main() {
	uint8_t i, j;
	uint8_t val;
	uint8_t scan[4] = {0x0E, 0x0D, 0x0B, 0x07}; // Row activation pattern
	char key[4][4] = {
		{'P', '1', '2', '3'},
		{'V', '5', '6', '7'},
		{'T', '9', 'A', 'B'},
		{'C', 'D', 'E', 'F'}
	};

	// Initialize GPIO and LCD
	LPC_GPIO2->FIODIR |= ROW_PINS; // Set row pins as output
	LPC_GPIO2->FIODIR &= ~COL_PINS; // Set column pins as input
	LPC_GPIO0->FIODIR |= LCD_DATA_PINS | LCD_RS_PIN(10) | LCD_EN_PIN(11); // Set LCD pins as output

	lcd_init();
	lcd_cmd_write(0x0C); // Display on, cursor off command
	lcd_str_write("Key Pressed: ");

	LPC_GPIO2->FIODIR |= ROW_PINS; // Set row pins as output
	LPC_GPIO2->FIODIR &= ~COL_PINS; // Set column pins as input

	while (1) {
		char pressed_key = '\0';  // Variable to store the pressed key
		char entered_password[5] = {0}; // Array to store the entered password
		int password_index = 0;

		// Keypad scanning logic
		for (i = 0; i < 4; i++) {
			LPC_GPIO2->FIOCLR = ROW_PINS; // Clear all rows
			LPC_GPIO2->FIOSET = scan[i] << 4; // Set one row high

			delay(50); // Short delay to allow for stabilization

			val = LPC_GPIO2->FIOPIN & COL_PINS; // Read columns

			for (j = 0; j < 4; j++) {
				if ((val & (1 << j)) == 0) { // Column active if bit is low
					pressed_key = key[i][j]; // Get the pressed key value
					break;
				}
			}

			if (pressed_key != '\0') {
				break; // Exit if a key is pressed
			}
		}

		if (pressed_key != '\0') {
			if (pressed_key == 'P') {
				lcd_cmd_write(0x01); // Clear display
				lcd_str_write("Enter Pin:");

				while (password_index < 3) {
					for (i = 0; i < 4; i++) {
						LPC_GPIO2->FIOCLR = ROW_PINS; // Clear all rows
						LPC_GPIO2->FIOSET = scan[i] << 4; // Set one row high
						delay(10); // Short delay to allow for stabilization
						val = LPC_GPIO2->FIOPIN & COL_PINS; // Read columns

						for (j = 0; j < 4; j++) {
							if ((val & (1 << j)) == 0) {
								char key_pressed = key[i][j];

								if (key_pressed == '1' || key_pressed == '2' || key_pressed == '3') {
									entered_password[password_index++] = key_pressed; // Store valid keys
									lcd_data_write('*');
								}
								delay(50); // Shortened delay for debounce
							}
						}
					}
				}

				entered_password[3] = '\0'; // Null-terminate the string
				if (strcmp(entered_password, CORRECT_PASSWORD) == 0) {
					lcd_cmd_write(0x01); // Clear display
					lcd_str_write("WELCOME !!!!");
					delay(50);
					lcd_cmd_write(0x01);
					lcd_cmd_write(0x80);
					lcd_str_write("Select 1.DATE");
					lcd_cmd_write(0xC0);
					lcd_str_write("2.AUD 3.TEMPERATURE");

					while (1) { // Infinite loop to handle key presses after password is entered correctly
						pressed_key = '\0';  // Reset the pressed key

						for (i = 0; i < 4; i++) {
							LPC_GPIO2->FIOCLR = ROW_PINS; // Clear row lines
							LPC_GPIO2->FIOSET = scan[i] << 4; // Activate single row at a time
							val = LPC_GPIO2->FIOPIN & COL_PINS; // Read column lines

							for (j = 0; j < 4; j++) {
								if ((val & (1 << j)) == 0) { // If key is pressed in the scanned row
									pressed_key = key[i][j]; // Get the key value from the key map
									break;
								}
							}

							if (pressed_key != '\0') {
								break; // If a key is pressed, exit the loop
							}
						}

					if (pressed_key != '\0') {
                            if (pressed_key == 'T' || pressed_key == 'V' || pressed_key == 'C') {
                                handle_key_action(pressed_key);
                            } else {
                                lcd_cmd_write(0x01); // Clear display
                                lcd_str_write("Invalid Key");
                                delay(100); // Delay to display invalid key message
                            }
                        }
                    }
                } else {
                    lcd_cmd_write(0x01); // Clear display
                    lcd_str_write("Incorrect Pin");
                    delay(100); // Delay to display incorrect password message
                }
            } else {
                lcd_cmd_write(0x01); // Clear display
                lcd_str_write("Invalid Key");
                delay(100); // Delay to display invalid key message
            }
        }
    }
}


void handle_key_action(char key) {
    if (key == 'T') {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Select Audio:");
        delay(100); // Delay to display selection prompt
        handle_audio_selection();
    } else if (key == 'V') {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Date & Time");
        // Add RTC display code here
        delay(100); // Delay to display date and time prompt
    } else if (key == 'C') {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Temperature");
        // Add ADC code to display temperature here
        delay(100); // Delay to display temperature prompt
    } else {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Invalid Key");
        delay(100); // Delay to display invalid key message
    }
}

void handle_audio_selection(void) {
    uint8_t i, j, val;
    uint8_t scan[4] = {0x0E, 0x0D, 0x0B, 0x07}; // Row activation pattern
    char key_map[4][4] = {
        {'P', '1', '2', '3'},
        {'V', '5', '6', '7'},
        {'T', '9', 'A', 'B'},
        {'C', 'D', 'E', 'F'}
    };

    char audio_key = '\0'; // Variable to store selected key
    char *language = NULL; // Pointer to store language message

    while (1) {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Select Audio:"); // Display selection prompt
        delay(10); // Delay to display prompt

        for (i = 0; i < 4; i++) {
            LPC_GPIO2->FIOCLR = ROW_PINS;
            LPC_GPIO2->FIOSET = scan[i] << 4;
            val = LPC_GPIO2->FIOPIN & COL_PINS;

            for (j = 0; j < 4; j++) {
                if ((val & (1 << j)) == 0) {
                    audio_key = key_map[i][j];
                    break;
                }
            }

            if (audio_key != '\0') {
                break;
            }
        }

        if (audio_key != '\0') {
            lcd_cmd_write(0x01); // Clear display

            // Determine the language based on the key pressed
            if (audio_key == '9') {
                language = "KANNADA";
            } else if (audio_key == 'A') {
                language = "ENGLISH";
            } else if (audio_key == 'B') {
                language = "HINDI";
            } else {
                language = "Unknown";
            }

            
            lcd_str_write(language); // Display selected language
            delay(100); // Delay to display selected language message
            break; // Exit after selection
        }
    }
}



void lcd_cmd_write(char cmd) {
	LPC_GPIO0->FIOCLR = LCD_DATA_PINS;       // Clear LCD data pins
	LPC_GPIO0->FIOSET = (cmd << 15);         // Set command on data pins
	LPC_GPIO0->FIOCLR = LCD_RS_PIN(10);      // RS = 0 for command
	LPC_GPIO0->FIOSET = LCD_EN_PIN(11);      // Enable high
	delay(50);                              // Increased delay for stability
	LPC_GPIO0->FIOCLR = LCD_EN_PIN(11);      // Enable low
	delay(50);                              // Delay after command
}

void lcd_data_write(char dat) {
	LPC_GPIO0->FIOCLR = LCD_DATA_PINS;       // Clear LCD data pins
	LPC_GPIO0->FIOSET = (dat << 15);         // Set data on data pins
	LPC_GPIO0->FIOSET = LCD_RS_PIN(10);      // RS = 1 for data
	LPC_GPIO0->FIOSET = LCD_EN_PIN(11);      // Enable high
	delay(50);                              // Increased delay for stability
	LPC_GPIO0->FIOCLR = LCD_EN_PIN(11);      // Enable low
	delay(50);                              // Delay after data
}

void lcd_str_write(char *str) {
	while (*str) {
		lcd_data_write(*str++);
	}
}

void lcd_init(void) {
	delay(50); // Ensure power-on delay is long enough
	lcd_cmd_write(0x38); // 8-bit mode, 2-line display, 5x8 font
	lcd_cmd_write(0x0C); // Display ON, Cursor OFF
	lcd_cmd_write(0x01); // Clear display
	delay(50); // Give extra time for initialization
}

void delay(uint32_t ms) {
	uint32_t i, j,k;
	for (i = 0; i < ms; i++) {
		for (j = 0; j < 3000; j++) {
			k++;//_asm volatile ("nop"); // No operation for time-wasting
		}
	}
}
---------------------------------------------------------------------------------------------------------------------------------


PROJECT WITH TEMPERATURE


#include <lpc17xx.h>
#include <stdint.h>
#include <string.h> // For strcmp

#define ROW_PINS (0x0F << 4)    // Rows connected to P2.4 to P2.7
#define COL_PINS (0x0F << 0)    // Columns connected to P2.0 to P2.3
#define LCD_DATA_PINS (0xFF << 15) // LCD Data pins connected to P0.15 to P0.22
#define LCD_RS_PIN(X) (1 << X)  // RS pin for LCD connected to P0.X
#define LCD_EN_PIN(X) (1 << X)  // Enable pin for LCD connected to P0.X

#define VREF       3.3 //Reference Voltage at VREFP pin, given VREFN = 0V(GND)
#define ADC_CLK_EN (1<<12)
#define SEL_AD0_2  (1<<2) //Select Channel AD0.1 
#define CLKDIV     (3 << 8)      //ADC clock-divider (ADC_CLOCK=PCLK/CLKDIV+1) = 1Mhz @ 4Mhz PCLK
#define PWRUP      (1<<21) //setting it to 0 will power it down
#define START_CNV  (1<<24) //001 for starting the conversion immediately
#define ADC_DONE   (1U<<31) //define it as unsigned value or compiler will throw #61-D warning int m
#define LCD_DATA_PINS (0xff<<15)
#define  T_COEFF 100.0f

const char CORRECT_PASSWORD[] = "123"; // Define the correct password

void lcd_init(void);
void lcd_cmd_write(char cmd);
void lcd_data_write(char dat);
void lcd_str_write(char *str);
void delay(uint32_t ms);
void handle_key_action(char key);
void handle_audio_selection(void);
float temperature();

int main() {
	uint8_t i, j;
	uint8_t val;
	uint8_t scan[4] = {0x0E, 0x0D, 0x0B, 0x07}; // Row activation pattern
	char key[4][4] = {
		{'P', '1', '2', '3'},
		{'V', '5', '6', '7'},
		{'T', '9', 'A', 'B'},
		{'C', 'D', 'E', 'F'}
	};

	// Initialize GPIO and LCD
	LPC_GPIO2->FIODIR |= ROW_PINS; // Set row pins as output
	LPC_GPIO2->FIODIR &= ~COL_PINS; // Set column pins as input
	LPC_GPIO0->FIODIR |= LCD_DATA_PINS | LCD_RS_PIN(10) | LCD_EN_PIN(11); // Set LCD pins as output

	lcd_init();
	lcd_cmd_write(0x0C); // Display on, cursor off command
	lcd_str_write("Key Pressed: ");

	LPC_GPIO2->FIODIR |= ROW_PINS; // Set row pins as output
	LPC_GPIO2->FIODIR &= ~COL_PINS; // Set column pins as input

	while (1) {
		char pressed_key = '\0';  // Variable to store the pressed key
		char entered_password[5] = {0}; // Array to store the entered password
		int password_index = 0;

		// Keypad scanning logic
		for (i = 0; i < 4; i++) {
			LPC_GPIO2->FIOCLR = ROW_PINS; // Clear all rows
			LPC_GPIO2->FIOSET = scan[i] << 4; // Set one row high

			delay(50); // Short delay to allow for stabilization

			val = LPC_GPIO2->FIOPIN & COL_PINS; // Read columns

			for (j = 0; j < 4; j++) {
				if ((val & (1 << j)) == 0) { // Column active if bit is low
					pressed_key = key[i][j]; // Get the pressed key value
					break;
				}
			}

			if (pressed_key != '\0') {
				break; // Exit if a key is pressed
			}
		}

		if (pressed_key != '\0') {
			if (pressed_key == 'P') {
				lcd_cmd_write(0x01); // Clear display
				lcd_str_write("Enter Pin:");

				while (password_index < 3) {
					for (i = 0; i < 4; i++) {
						LPC_GPIO2->FIOCLR = ROW_PINS; // Clear all rows
						LPC_GPIO2->FIOSET = scan[i] << 4; // Set one row high
						delay(10); // Short delay to allow for stabilization
						val = LPC_GPIO2->FIOPIN & COL_PINS; // Read columns

						for (j = 0; j < 4; j++) {
							if ((val & (1 << j)) == 0) {
								char key_pressed = key[i][j];

								if (key_pressed == '1' || key_pressed == '2' || key_pressed == '3') {
									entered_password[password_index++] = key_pressed; // Store valid keys
									lcd_data_write('*');
								}
								delay(50); // Shortened delay for debounce
							}
						}
					}
				}

				entered_password[3] = '\0'; // Null-terminate the string
				if (strcmp(entered_password, CORRECT_PASSWORD) == 0) {
					lcd_cmd_write(0x01); // Clear display
					lcd_str_write("WELCOME !!!!");
					delay(50);
					lcd_cmd_write(0x01);
					lcd_cmd_write(0x80);
					lcd_str_write("Select 1.DATE");
					lcd_cmd_write(0xC0);
					lcd_str_write("2.AUD 3.TEMPERATURE");

					while (1) { // Infinite loop to handle key presses after password is entered correctly
						pressed_key = '\0';  // Reset the pressed key

						for (i = 0; i < 4; i++) {
							LPC_GPIO2->FIOCLR = ROW_PINS; // Clear row lines
							LPC_GPIO2->FIOSET = scan[i] << 4; // Activate single row at a time
							val = LPC_GPIO2->FIOPIN & COL_PINS; // Read column lines

							for (j = 0; j < 4; j++) {
								if ((val & (1 << j)) == 0) { // If key is pressed in the scanned row
									pressed_key = key[i][j]; // Get the key value from the key map
									break;
								}
							}

							if (pressed_key != '\0') {
								break; // If a key is pressed, exit the loop
							}
						}

					if (pressed_key != '\0') {
                            if (pressed_key == 'T' || pressed_key == 'V' || pressed_key == 'C') {
                                handle_key_action(pressed_key);
                            } else {
                                lcd_cmd_write(0x01); // Clear display
                                lcd_str_write("Invalid Key");
                                delay(100); // Delay to display invalid key message
                            }
                        }
                    }
                } else {
                    lcd_cmd_write(0x01); // Clear display
                    lcd_str_write("Incorrect Pin");
                    delay(100); // Delay to display incorrect password message
                }
            } else {
                lcd_cmd_write(0x01); // Clear display
                lcd_str_write("Invalid Key");
                delay(100); // Delay to display invalid key message
            }
        }
    }
}


void handle_key_action(char key) {
    if (key == 'T') {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Select Audio:");
        delay(100); // Delay to display selection prompt
        handle_audio_selection();
    } else if (key == 'V') {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Date & Time");
        // Add RTC display code here
        delay(100); // Delay to display date and time prompt
    } else if (key == 'C') {
        lcd_cmd_write(0x01); // Clear display
		 temperature();
        // Add ADC code to display temperature here
        delay(100); // Delay to display temperature prompt
    } else {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Invalid Key");
        delay(100); // Delay to display invalid key message
    }
}

void handle_audio_selection(void) {
    uint8_t i, j, val;
    uint8_t scan[4] = {0x0E, 0x0D, 0x0B, 0x07}; // Row activation pattern
    char key_map[4][4] = {
        {'P', '1', '2', '3'},
        {'V', '5', '6', '7'},
        {'T', '9', 'A', 'B'},
        {'C', 'D', 'E', 'F'}
    };

    char audio_key = '\0'; // Variable to store selected key
    char *language = NULL; // Pointer to store language message

    while (1) {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Select Audio:"); // Display selection prompt
        delay(10); // Delay to display prompt

        for (i = 0; i < 4; i++) {
            LPC_GPIO2->FIOCLR = ROW_PINS;
            LPC_GPIO2->FIOSET = scan[i] << 4;
            val = LPC_GPIO2->FIOPIN & COL_PINS;

            for (j = 0; j < 4; j++) {
                if ((val & (1 << j)) == 0) {
                    audio_key = key_map[i][j];
                    break;
                }
            }

            if (audio_key != '\0') {
                break;
            }
        }

        if (audio_key != '\0') {
            lcd_cmd_write(0x01); // Clear display

            // Determine the language based on the key pressed
            if (audio_key == '9') {
                language = "KANNADA";
            } else if (audio_key == 'A') {
                language = "ENGLISH";
            } else if (audio_key == 'B') {
                language = "HINDI";
            } else {
                language = "Unknown";
            }

            
            lcd_str_write(language); // Display selected language
            delay(100); // Delay to display selected language message
            break; // Exit after selection
        }
    }
}


float temperature()
{
	int result = 0;

	float volts = 0;
	char svolts[20];

	float temp = 0;
  	char stemp[20];
	
	LPC_PINCON->PINSEL1 |= (0x01<<18) ; //select AD0.2 for P0.25
	LPC_SC->PCONP |= ADC_CLK_EN; //Enable ADC clock
	LPC_ADC->ADCR =  PWRUP | CLKDIV | SEL_AD0_2;
	
	lcd_init();
		
	while(1)
	{
		LPC_ADC->ADCR |= START_CNV; //Start new Conversion

		while((LPC_ADC->ADDR2 & ADC_DONE) == 0){} //Wait untill conversion is finished
		
		result = (LPC_ADC->ADDR2>>4) & 0xFFF; //12 bit Mask to extract result
		
		volts = (result*VREF)/4096.0; //Convert result to Voltage
		lcd_cmd_write(0xC0);
        
		temp = volts * T_COEFF;
		sprintf(stemp,"Temp=%.2f 'C",temp);
		lcd_str_write(stemp);
		delay(200); //Slowing down Updates to 2 Updates per second
	    lcd_cmd_write(0x01);
		break;
	}
	
	 return 0;//This won't execute
}



void lcd_cmd_write(char cmd) {
	LPC_GPIO0->FIOCLR = LCD_DATA_PINS;       // Clear LCD data pins
	LPC_GPIO0->FIOSET = (cmd << 15);         // Set command on data pins
	LPC_GPIO0->FIOCLR = LCD_RS_PIN(10);      // RS = 0 for command
	LPC_GPIO0->FIOSET = LCD_EN_PIN(11);      // Enable high
	delay(50);                              // Increased delay for stability
	LPC_GPIO0->FIOCLR = LCD_EN_PIN(11);      // Enable low
	delay(50);                              // Delay after command
}

void lcd_data_write(char dat) {
	LPC_GPIO0->FIOCLR = LCD_DATA_PINS;       // Clear LCD data pins
	LPC_GPIO0->FIOSET = (dat << 15);         // Set data on data pins
	LPC_GPIO0->FIOSET = LCD_RS_PIN(10);      // RS = 1 for data
	LPC_GPIO0->FIOSET = LCD_EN_PIN(11);      // Enable high
	delay(50);                              // Increased delay for stability
	LPC_GPIO0->FIOCLR = LCD_EN_PIN(11);      // Enable low
	delay(50);                              // Delay after data
}

void lcd_str_write(char *str) {
	while (*str) {
		lcd_data_write(*str++);
	}
}

void lcd_init(void) {
	delay(50); // Ensure power-on delay is long enough
	lcd_cmd_write(0x38); // 8-bit mode, 2-line display, 5x8 font
	lcd_cmd_write(0x0C); // Display ON, Cursor OFF
	lcd_cmd_write(0x01); // Clear display
	delay(50); // Give extra time for initialization
}

void delay(uint32_t ms) {
	uint32_t i, j,k;
	for (i = 0; i < ms; i++) {
		for (j = 0; j < 3000; j++) {
			k++;//_asm volatile ("nop"); // No operation for time-wasting
		}
	}
}



------------------------------------------------------------------------------------------------------------------------------------------

project with RTC

#include <lpc17xx.h>
#include <stdint.h>
#include <string.h> // For strcmp

#define ROW_PINS (0x0F << 4)    // Rows connected to P2.4 to P2.7
#define COL_PINS (0x0F << 0)    // Columns connected to P2.0 to P2.3
#define LCD_DATA_PINS (0xFF << 15) // LCD Data pins connected to P0.15 to P0.22
#define LCD_RS_PIN(X) (1 << X)  // RS pin for LCD connected to P0.X
#define LCD_EN_PIN(X) (1 << X)  // Enable pin for LCD connected to P0.X

#define VREF       3.3 //Reference Voltage at VREFP pin, given VREFN = 0V(GND)
#define ADC_CLK_EN (1<<12)
#define SEL_AD0_2  (1<<2) //Select Channel AD0.1 
#define CLKDIV     (3 << 8)      //ADC clock-divider (ADC_CLOCK=PCLK/CLKDIV+1) = 1Mhz @ 4Mhz PCLK
#define PWRUP      (1<<21) //setting it to 0 will power it down
#define START_CNV  (1<<24) //001 for starting the conversion immediately
#define ADC_DONE   (1U<<31) //define it as unsigned value or compiler will throw #61-D warning int m
#define LCD_DATA_PINS (0xff<<15)
#define  T_COEFF 100.0f

#define LCD_DATA_PINS (0xFF << 15)
#define LCD_RS_PIN(X) (1 << X)
#define LCD_EN_PIN(X) (1 << X)


const char CORRECT_PASSWORD[] = "123"; // Define the correct password

void lcd_config(void);
void lcd_init(void);
void lcd_cmd_write(char cmd);
void lcd_data_write(char dat);
void lcd_str_write(char *str);
void delay(uint32_t ms);
void lcd_num(unsigned int num);
void handle_key_action(char key);
void handle_audio_selection(void);
float temperature();
int date_time();


int main() {
	uint8_t i, j;
	uint8_t val;
	uint8_t scan[4] = {0x0E, 0x0D, 0x0B, 0x07}; // Row activation pattern
	char key[4][4] = {
		{'P', '1', '2', '3'},
		{'V', '5', '6', '7'},
		{'T', '9', 'A', 'B'},
		{'C', 'D', 'E', 'F'}
	};

	// Initialize GPIO and LCD
	LPC_GPIO2->FIODIR |= ROW_PINS; // Set row pins as output
	LPC_GPIO2->FIODIR &= ~COL_PINS; // Set column pins as input
	LPC_GPIO0->FIODIR |= LCD_DATA_PINS | LCD_RS_PIN(10) | LCD_EN_PIN(11); // Set LCD pins as output

	lcd_init();
	lcd_cmd_write(0x0C); // Display on, cursor off command
	lcd_str_write("PLEASE LOGIN: ");

	LPC_GPIO2->FIODIR |= ROW_PINS; // Set row pins as output
	LPC_GPIO2->FIODIR &= ~COL_PINS; // Set column pins as input

	while (1) {
		char pressed_key = '\0';  // Variable to store the pressed key
		char entered_password[5] = {0}; // Array to store the entered password
		int password_index = 0;

		// Keypad scanning logic
		for (i = 0; i < 4; i++) {
			LPC_GPIO2->FIOCLR = ROW_PINS; // Clear all rows
			LPC_GPIO2->FIOSET = scan[i] << 4; // Set one row high

			delay(50); // Short delay to allow for stabilization

			val = LPC_GPIO2->FIOPIN & COL_PINS; // Read columns

			for (j = 0; j < 4; j++) {
				if ((val & (1 << j)) == 0) { // Column active if bit is low
					pressed_key = key[i][j]; // Get the pressed key value
					break;
				}
			}

			if (pressed_key != '\0') {
				break; // Exit if a key is pressed
			}
		}

		if (pressed_key != '\0') {
			if (pressed_key == 'P') {
				lcd_cmd_write(0x01); // Clear display
				lcd_str_write("Enter Pin:");

				while (password_index < 3) {
					for (i = 0; i < 4; i++) {
						LPC_GPIO2->FIOCLR = ROW_PINS; // Clear all rows
						LPC_GPIO2->FIOSET = scan[i] << 4; // Set one row high
						delay(10); // Short delay to allow for stabilization
						val = LPC_GPIO2->FIOPIN & COL_PINS; // Read columns

						for (j = 0; j < 4; j++) {
							if ((val & (1 << j)) == 0) {
								char key_pressed = key[i][j];

								if (key_pressed == '1' || key_pressed == '2' || key_pressed == '3') {
									entered_password[password_index++] = key_pressed; // Store valid keys
									lcd_data_write('*');
								}
								delay(50); // Shortened delay for debounce
							}
						}
					}
				}

				entered_password[3] = '\0'; // Null-terminate the string
				if (strcmp(entered_password, CORRECT_PASSWORD) == 0) {
					lcd_cmd_write(0x01); // Clear display
					lcd_str_write("WELCOME !!!!");
					delay(50);
					lcd_cmd_write(0x01);
					lcd_cmd_write(0x80);
					lcd_str_write("Select 1.DATE");
					lcd_cmd_write(0xC0);
					lcd_str_write("2.AUD 3.TEMP");

					while (1) { // Infinite loop to handle key presses after password is entered correctly
						pressed_key = '\0';  // Reset the pressed key

						for (i = 0; i < 4; i++) {
							LPC_GPIO2->FIOCLR = ROW_PINS; // Clear row lines
							LPC_GPIO2->FIOSET = scan[i] << 4; // Activate single row at a time
							val = LPC_GPIO2->FIOPIN & COL_PINS; // Read column lines

							for (j = 0; j < 4; j++) {
								if ((val & (1 << j)) == 0) { // If key is pressed in the scanned row
									pressed_key = key[i][j]; // Get the key value from the key map
									break;
								}
							}

							if (pressed_key != '\0') {
								break; // If a key is pressed, exit the loop
							}
						}

					if (pressed_key != '\0') {
                            if (pressed_key == 'T' || pressed_key == 'V' || pressed_key == 'C') {
                                handle_key_action(pressed_key);
                            } else {
                                lcd_cmd_write(0x01); // Clear display
                                lcd_str_write("Invalid Key");
                                delay(100); // Delay to display invalid key message
                            }
                        }
                    }
                } else {
                    lcd_cmd_write(0x01); // Clear display
					lcd_cmd_write(0x80);
					lcd_str_write("SORRY !!!");
					lcd_cmd_write(0xC0);
                    lcd_str_write("Incorrect Pin !");
                    delay(100); // Delay to display incorrect password message
                }
            } else {
                lcd_cmd_write(0x01); // Clear display
                lcd_str_write("Invalid Key");
                delay(100); // Delay to display invalid key message
            }
        }
    }
}


void handle_key_action(char key) {
    if (key == 'T') {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Select Audio:");
        delay(100); // Delay to display selection prompt
        handle_audio_selection();
    } else if (key == 'V') {
        lcd_cmd_write(0x01); // Clear display
        date_time();
        // Add RTC display code here
        delay(100); // Delay to display date and time prompt
    } else if (key == 'C') {
        lcd_cmd_write(0x01); // Clear display
		 temperature();
        // Add ADC code to display temperature here
        delay(100); // Delay to display temperature prompt
    } else {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Invalid Key");
        delay(100); // Delay to display invalid key message
    }
}

void handle_audio_selection(void) {
    uint8_t i, j, val;
    uint8_t scan[4] = {0x0E, 0x0D, 0x0B, 0x07}; // Row activation pattern
    char key_map[4][4] = {
        {'P', '1', '2', '3'},
        {'V', '5', '6', '7'},
        {'T', '9', 'A', 'B'},
        {'C', 'D', 'E', 'F'}
    };

    char audio_key = '\0'; // Variable to store selected key
    char *language = NULL; // Pointer to store language message

    while (1) {
        lcd_cmd_write(0x01); // Clear display
        lcd_str_write("Select Audio:"); // Display selection prompt
        delay(10); // Delay to display prompt

        for (i = 0; i < 4; i++) {
            LPC_GPIO2->FIOCLR = ROW_PINS;
            LPC_GPIO2->FIOSET = scan[i] << 4;
            val = LPC_GPIO2->FIOPIN & COL_PINS;

            for (j = 0; j < 4; j++) {
                if ((val & (1 << j)) == 0) {
                    audio_key = key_map[i][j];
                    break;
                }
            }

            if (audio_key != '\0') {
                break;
            }
        }

        if (audio_key != '\0') {
            lcd_cmd_write(0x01); // Clear display

            // Determine the language based on the key pressed
            if (audio_key == '9') {
                language = "KANNADA";
            } else if (audio_key == 'A') {
                language = "ENGLISH";
            } else if (audio_key == 'B') {
                language = "HINDI";
            } else {
                language = "Unknown";
            }

            
            lcd_str_write(language); // Display selected language
            delay(100); // Delay to display selected language message
            break; // Exit after selection
        }
    }
}

int date_time() {
    char stime[20];
    char sdate[20];
    uint8_t previous_sec, current_sec;
    uint8_t i, j, val;

    LPC_SC->PCONP |= (1 << 9); // Enable power/clock to RTC

    // Select the external 32.768 kHz oscillator as the clock source for the RTC
    LPC_RTC->CCR = (1 << 4);
    LPC_RTC->CCR |= 0x01; // Enable the RTC

    // Initialize the RTC time and date
    LPC_RTC->YEAR = 2024;
    LPC_RTC->MONTH = 9;
    LPC_RTC->DOM = 6;
    LPC_RTC->HOUR = 11;
    LPC_RTC->MIN = 5;
    LPC_RTC->SEC = 45;

    previous_sec = LPC_RTC->SEC;

    lcd_config();
    lcd_cmd_write(0x0C); // Turn on the display

    while (1) {
        // Update the current second from the RTC
        current_sec = LPC_RTC->SEC;

        // Update the display only when the second changes
        if (current_sec != previous_sec) {
            previous_sec = current_sec;

            sprintf(stime, "Time-%02d:%02d:%02d", LPC_RTC->HOUR, LPC_RTC->MIN, current_sec);
            lcd_cmd_write(0x80); // Return to the first line
            lcd_str_write(stime);

            sprintf(sdate, "Date-%02d:%02d:%04d", LPC_RTC->DOM, LPC_RTC->MONTH, LPC_RTC->YEAR);
            lcd_cmd_write(0xC0); // Move to the second line
            lcd_str_write(sdate);
        }

        // Key detection to exit
        for (i = 0; i < 4; i++) {
            LPC_GPIO2->FIOCLR = ROW_PINS; // Clear row lines
            LPC_GPIO2->FIOSET = (0x0E >> i) << 4; // Activate a single row at a time
            val = LPC_GPIO2->FIOPIN & COL_PINS; // Read column lines

            for (j = 0; j < 4; j++) {
                if ((val & (1 << j)) == 0) { // If a key is pressed in the scanned row
                    return 1; // Exit the date_time function
                }
            }
        }
    }
}


float temperature()
{
	int result = 0;

	float volts = 0;
	char svolts[20];

	float temp = 0;
  	char stemp[20];
	
	LPC_PINCON->PINSEL1 |= (0x01<<18) ; //select AD0.2 for P0.25
	LPC_SC->PCONP |= ADC_CLK_EN; //Enable ADC clock
	LPC_ADC->ADCR =  PWRUP | CLKDIV | SEL_AD0_2;
	
	lcd_init();
		
	while(1)
	{
		LPC_ADC->ADCR |= START_CNV; //Start new Conversion

		while((LPC_ADC->ADDR2 & ADC_DONE) == 0){} //Wait untill conversion is finished
		
		result = (LPC_ADC->ADDR2>>4) & 0xFFF; //12 bit Mask to extract result
		
		volts = (result*VREF)/4096.0; //Convert result to Voltage
		lcd_cmd_write(0xC0);
        
		temp = volts * T_COEFF;
		sprintf(stemp,"Temp=%.2f 'C",temp);
		lcd_str_write(stemp);
		delay(200); //Slowing down Updates to 2 Updates per second
	    lcd_cmd_write(0x01);
		break;
	}
	
	 return 0;//This won't execute
}

void lcd_config(void) {
    LPC_GPIO0->FIODIR |= LCD_DATA_PINS;
    LPC_GPIO0->FIODIR |= LCD_RS_PIN(10);
    LPC_GPIO0->FIODIR |= LCD_EN_PIN(11);
    lcd_cmd_write(0x38);
    lcd_cmd_write(0x0E);
    lcd_cmd_write(0x01);
    return;
}


void lcd_cmd_write(char cmd) {
	LPC_GPIO0->FIOCLR = LCD_DATA_PINS;       // Clear LCD data pins
	LPC_GPIO0->FIOSET = (cmd << 15);         // Set command on data pins
	LPC_GPIO0->FIOCLR = LCD_RS_PIN(10);      // RS = 0 for command
	LPC_GPIO0->FIOSET = LCD_EN_PIN(11);      // Enable high
	delay(50);                              // Increased delay for stability
	LPC_GPIO0->FIOCLR = LCD_EN_PIN(11);      // Enable low
	delay(50);                              // Delay after command
}

void lcd_data_write(char dat) {
	LPC_GPIO0->FIOCLR = LCD_DATA_PINS;       // Clear LCD data pins
	LPC_GPIO0->FIOSET = (dat << 15);         // Set data on data pins
	LPC_GPIO0->FIOSET = LCD_RS_PIN(10);      // RS = 1 for data
	LPC_GPIO0->FIOSET = LCD_EN_PIN(11);      // Enable high
	delay(50);                              // Increased delay for stability
	LPC_GPIO0->FIOCLR = LCD_EN_PIN(11);      // Enable low
	delay(50);                              // Delay after data
}

void lcd_str_write(char *str) {
	while (*str) {
		lcd_data_write(*str++);
	}
}

void lcd_init(void) {
	delay(50); // Ensure power-on delay is long enough
	lcd_cmd_write(0x38); // 8-bit mode, 2-line display, 5x8 font
	lcd_cmd_write(0x0C); // Display ON, Cursor OFF
	lcd_cmd_write(0x01); // Clear display
	delay(50); // Give extra time for initialization
}


void lcd_num(unsigned int num) { // Recursive function
    if (num) { // 1234
        lcd_num(num / 10);
        lcd_data_write(num % 10 + 0x30);
    }
}


void delay(uint32_t ms) {
	uint32_t i, j,k;
	for (i = 0; i < ms; i++) {
		for (j = 0; j < 3000; j++) {
			k++;//_asm volatile ("nop"); // No operation for time-wasting
		}
	}
}












